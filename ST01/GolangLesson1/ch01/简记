Go语言设计哲学：
    1.简单
        仅有25个关键字，主流编程语言最少。
        内置垃圾收集，降低开发人员内存管理负担。
        首字母大小决定可见性，无需通过额外关键字修饰。
        变量初始为类型零值，避免随机值作为初值问题。
        内置数组边界检查，极大减少越界访问带来的安全隐患。
        内置并发支持，简化并发程序设计。
        内置接口类型，为组合的设计哲学奠定基础。
        原生提供完善的工具链，开箱即用。
        ......
    2.显示
        在 Go 语言中，不同类型变量是不能在一起进行混合计算的，这是因为 Go 希望开发人员明确知道自己在做什么，这与 C 语言的“信任程序员”原则完全不同，因此你需要以显式的方式通过转型统一参与计算各个变量的类型。
    3.组合
        Go 语言无类型层次体系，各类型之间是相互独立的，没有子类型的概念；

        每个类型都可以有自己的方法集合，类型定义与方法实现是正交独立的；

        实现某个接口时，无需像 Java 那样采用特定关键字修饰；

        包之间是相对独立的，没有子包的概念。
        Go 语言为支撑组合的设计提供了类型嵌入(Type Embedding)。通过类型嵌入，我们可以将已经实现的功能嵌入到新类型中，以快速满足新类型的功能需求，这种方式有些类似经典面向对象语言中的“继承”机制，但在原理上却与面向对象中的继承完全不同，这是一种 Go 设计者们精心设计的“语法糖”。

        被嵌入的类型和新类型两者之间没有任何关系，甚至相互完全不知道对方的存在，更没有经典面向对象语言中的那种父类、子类的关系，以及向上、向下转型(Type Casting)。通过新类型实例调用方法时，方法的匹配主要取决于方法名字，而不是类型。这种组合方式，我称之为垂直组合，即通过类型嵌入，快速让一个新类型“复用”其他类型已经实现的能力，实现功能的垂直扩展。
    4.并发
    5.面向工程

