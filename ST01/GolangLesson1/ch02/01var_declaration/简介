1.变量含义：在编程语言中，为了方便操作内存特定位置的数据，我们用一个特定的名字与位于特定位置的内存块绑定在一起，这个名字被称为变量。

2.变量所绑定的内存区域是要有一个明确的边界，边界信息由变量的类型属性赋予，使用变量之前需要先进行变量声明来显式告知编译器一个变量的边界信息。

go语言变量声明方法：
    通用：
        var a int = 10,其中var-修饰变量声明的关键字、a-变量名、int-变量类型、=-赋值操作、10-初值。
    
        如果你没有显式为变量赋予初值，Go 编译器会为变量赋予这个类型的零值：var a int // a的初值为int类型的零值：0
   
        类型零值：所有整型类型-0，浮点类型-0.0，布尔类型-false，字符串类型-""，指针、接口、切片、chanel、map和函数类型-nil，数组、结构体这样复合类型变量的零值就是它们组成元素都为零值时的结果。
    变量声明块
        var (
            a int = 128
            b int8 = 6
            s string = "hello"
            c rune = 'A'
            t bool = true
        )
    声明多变量
        var a, b, c int = 5, 6, 7
    声明块声明多变量
        var (
            a, b, c int = 5, 6, 7
            c, d, e rune = 'C', 'D', 'E'
        )
    省略类型信息的声明
        var varName = initExpression
        var b = 13
        var a, b, c = 12, 'A', "hello"
    短变量声明：变量类型也是由 Go 编译器自动推导出来
        varName := initExpression
        a := 12
        b := 'A'
        c := "hello"
        a, b, c := 12, 'A', "hello"

Go 语言的两类变量：包级变量 (package varible)和局部变量 (local varible)
    包级变量：就近原则
        声明并同时显式初始化
            var (
                a = 13
                b = int32(17)
                f = float32(3.14)
            )        
        声明但延迟初始化
            var a int32
            var f float64
    局部变量：
        对于延迟初始化的局部变量声明，我们采用通用的变量声明形式
            var err error
        对于声明且显式初始化的局部变量，建议使用短变量声明形式
            接受默认类型的变量
                a := 17
                f := 3.14
                s := "hello, gopher!"
            不接受默认类型的变量
                a := int32(17)
                f := float32(3.14)
                s := []byte("hello, gopher!")
            注意：尽量在分支控制时使用短变量声明形式
